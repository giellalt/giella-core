## Process this file with automake to produce Makefile.in
## Copyright: Sámediggi/Divvun/UiT
## Licence: GPL v3+

# Variables:
ALLINONE_MD_PAGE=$(srcdir)/$(GTLANG).md
LINKS=$(srcdir)/Links.md
HEADER=$(srcdir)/index-header.md
INDEX=$(srcdir)/index.md

# no regenerations while debugging
doc_DATA=$(INDEX) $(LINKS) $(ALLINONE_MD_PAGE)

.PHONY: generate-markdown regenerate-markdown

regenerate-markdown: generate-markdown

DOCC2MDWIKI=$(GTCORE)/scripts/doccomments2ghpages.awk

GRAPHPLOTTER=$(GTCORE)/scripts/plot-speller-progress.R

if WANT_SPELLERS
speller-report.svg: speller-report.tsv $(GRAPHPLOTTER)
	$(AM_V_GEN)"$(R)" --no-save < $(GRAPHPLOTTER)

speller-report.tsv: spell-tests.tsv $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst
	$(AM_V_GEN)$(DIVVUN_ACCURACY) $< $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst -t $@

report.json: spell-tests.tsv $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst
	$(AM_V_GEN)$(DIVVUN_ACCURACY) $< $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst -o $@

spell-tests.tsv:
	$(AM_V_GEN)cut -f 1,2 `find $(top_srcdir) -name typos.txt` |\
		egrep -v '^#' > $@

else
speller-report.svg: 
	@echo need to configure --enable-spellers to generate statistics
	touch $@

report.json: 
	@echo need to configure --enable-spellers to generate statistics
	touch $@
endif

define register_docsygenated_dir_2
$(srcdir)/%-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/%.cg3
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/%.lexc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/%.xfscript
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/%.pmscript
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/%.twolc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@
endef

define register_docsygenated_dir_3
$(srcdir)/%-$(3)-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/$(3)/%.cg3
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(3)-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/$(3)/%.lexc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(3)-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/$(3)/%.xfscript
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(3)-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/$(3)/%.pmscript
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@

$(srcdir)/%-$(3)-$(2)-$(1).md: $(top_srcdir)/$(1)/$(2)/$(3)/%.twolc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< > $$@
endef

# tree
# .
# ├── src												 y
# │   ├── cg3											 y
# │   ├── filters										 n
# │   ├── fst											 y
# │   │   ├── affixes									 y
# │   │   ├── generated_files							 n
# │   │   ├── incoming									 n
# │   │   └── stems										 y
# │   ├── hyphenation									 ?
# │   ├── orthography									 ?
# │   ├── phonetics										 Y
# │   │   └── tests										 N
# │   ├── tagsets										 N?
# │   └── transcriptions								 Y
# ├── test												 N
# └── tool												 Y
#     ├── analysers										 ?
#     ├── grammarcheckers								 Y
#     │   ├── filters									 N
#     │   └── tests										 N
#     ├── hyphenators									 ?
#     │   └── filters									 N
#     ├── mt											 Y
#     │   ├── apertium									 Y
#     │   │   ├── filters								 N
#     │   │   └── tagsets								 N
#     │   ├── cgbased									 N
#     │   └── filters									 N
#     ├── shellscripts									 N
#     ├── spellcheckers									 ?
#     │   ├── filters									 N
#     │   └── weights									 N
#     ├── tokenisers									 Y
#     │   ├── filters									 N
#     │   └── tests										 N
#     └── tts											 Y
#         └── test										 N

L3DIRS=fst cg3 transcriptions phonetics
$(foreach L3D,$(L3DIRS),$(eval $(call register_docsygenated_dir_2,src,$(L3D))))
L4DIRS=affixes stems
$(foreach L4D,$(L4DIRS),$(eval $(call register_docsygenated_dir_3,src,fst,$(L4D))))
L5DIRS=grammarcheckers tokenisers tts mt
$(foreach L5D,$(L5DIRS),$(eval $(call register_docsygenated_dir_2,tools,$(L5D))))
$(foreach L6D,apertium,$(eval $(call register_docsygenated_dir_3,tools,mt,$(L6D))))



# lang-crk
$(srcdir)/%-derivation-src.md: $(top_srcdir)/src/derivation/%.lexc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $< > $@



# lang-smn
$(srcdir)/%-oahpa-filer-fst-src.md: $(top_srcdir)/src/fst/oahpa-filer/%.lexc
	$(AM_V_AWK)"$(GAWK)" -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $< > $@



generated-markdowns.sources:
	$(AM_V_GEN)fgrep -rl \
		--include '*.lexc' \
		--include '*.twolc' \
		--include '*.cg3' \
		--exclude '*.pmscript' \
		--exclude '*.xfscript'\
		--exclude 'Makefile*' \
		--exclude 'lexicon.tmp.lexc' \
		--exclude-dir 'generated_files' \
		--exclude-dir 'orig' \
		--exclude-dir 'incoming' \
		'!! ' $(top_srcdir)/src/* $(top_srcdir)/tools/* |\
		fgrep -v incoming/ > $@

# ../src/fst/incoming/affixes/nouns.lexc
generated-markdowns.targets: generated-markdowns.sources
	$(AM_V_GEN)for f in `cat $<` ; do \
		case $$f in \
		*.lexc) x=`basename $$f .lexc` ;; \
		*.cg3) x=`basename $$f .cg3` ;; \
		*.twolc) x=`basename $$f .twolc` ;; \
		*.xfscript) x=`basename $$f .xfscript` ;; \
		*.pmscript) x=`basename $$f .pmscript` ;; \
		*) x=`basename $$f` ;; \
		esac ;\
		d=`dirname $$f` ;\
		p=`basename $$d xxx` ;\
		dd=`dirname $$d` ;\
		gp=`basename $$dd xxx` ;\
		ddd=`dirname $$dd` ;\
		ggp=`basename $$ddd xxx` ;\
		dddd=`dirname $$ddd`;\
		gggp=`basename $$dddd xxx`;\
		if test x$$gggp = xsrc -o x$$gggp = xtools ; then \
			echo $$x-$$p-$$gp-$$ggp-$$gggp.md;\
		elif test x$$ggp = xsrc -o x$$ggp = xtools ; then \
			echo $$x-$$p-$$gp-$$ggp.md;\
		elif test x$$gp = xsrc -o x$$gp = xtools ; then \
			echo $$x-$$p-$$gp.md ;\
		else \
			echo $$x-$$p.md ;\
		fi ;\
	done > $@


generate-markdown: generated-markdowns.targets
	$(AM_V_GEN)for f in `cat $<` ; do \
		$(MAKE) $(srcdir)/$$f;\
	done

$(ALLINONE_MD_PAGE): generate-markdown generated-markdowns.targets
	$(AM_V_GEN)cat `cat generated-markdowns.targets | sed -e 's@^@$(srcdir)/@'` > $@

$(LINKS): generate-markdown generated-markdowns.targets
	$(AM_V_GEN)cat generated-markdowns.targets |\
				LC_COLLATE=C sed 's/[a-zA-Z0-9._-]*/* [&]\(&\)/g' \
				> $@

# FIXME: some temporary stuff to have index page
$(INDEX): $(HEADER) $(LINKS)
	$(AM_V_GEN)cat $^ > $@

clean-local:
	$(AM_V_at)-rm -rf $(builddir)/build
	$(AM_V_at)-rm -rf $(srcdir)/build
	$(AM_V_at)-rm -f $(doc_DATA)
	$(AM_V_at)-rm -f *-src.md
	$(AM_V_at)-rm -f *-tools.md
	$(AM_V_at)-rm -f generated-markdowns.*

include $(top_srcdir)/../giella-core/am-shared/silent_build-include.am
# vim: set ft=automake:
