## Process this file with automake to produce Makefile.in
## Copyright: SÃ¡mediggi/Divvun/UiT
## Licence: GPL v3+

# Variables:
ALLINONE_MD_PAGE=$(srcdir)/$(GTLANG).md
LINKS=$(srcdir)/Links.md
HEADER=$(srcdir)/index-header.md
INDEX=$(srcdir)/index.md

REPONAME=$(shell  grep '__REPO__' $(top_srcdir)/.gut/delta.toml | cut -d'"' -f2)
# " reset syntax colouring - gets confused by the single double quote in the previous line

# no regenerations while debugging
doc_DATA=$(INDEX) $(LINKS) $(ALLINONE_MD_PAGE) lemmacount.json maturity.json

.PHONY: generate-markdown regenerate-markdown

regenerate-markdown: generate-markdown

DOCC2MDWIKI=$(GTCORE)/scripts/doccomments2ghpages.awk
DOCC2MDWIKI_CG3=$(GTCORE)/scripts/doccomments2ghpages-vislcg.awk

GRAPHPLOTTER=$(GTCORE)/scripts/plot-speller-progress.R

if WANT_SPELLERS
speller-report.svg: speller-report.tsv $(GRAPHPLOTTER)
	$(AM_V_GEN)"$(R)" --no-save < $(GRAPHPLOTTER)

speller-report.tsv: spell-tests.tsv $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst
	$(AM_V_GEN)$(DIVVUN_ACCURACY) $< $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst -t $@

report.json: spell-tests.tsv $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst
	$(AM_V_GEN)$(DIVVUN_ACCURACY) $< $(top_builddir)/tools/spellcheckers/$(GTLANG2).zhfst -o $@

spell-tests.tsv:
	$(AM_V_GEN)cut -f 1,2 `find $(top_srcdir) -name typos.txt` |\
		egrep -v '^#' > $@

else
speller-report.svg: 
	@echo need to configure --enable-spellers to generate statistics
	touch $@

report.json: 
	@echo need to configure --enable-spellers to generate statistics
	touch $@
endif

# Generate endpoint json file for shield.io lemma count badge.
# Only to be stored in the gh-pages branch, ignored in main.
$(srcdir)/lemmacount.json: $(top_srcdir)/src/fst/stems/*.lexc
	$(AM_V_GEN)$(GTCORE)/scripts/make-lemmacount.json.sh $(abs_top_srcdir) > $@

# Generate a maturity.json file as endpoint for the maturity badge.
$(srcdir)/maturity.json: FORCE
	$(AM_V_GEN)$(GTCORE)/scripts/make-maturity.json.sh $(REPONAME) > $@

# Define all doccomment source files in a variable:
DOCSRC_XEROX := $(shell fgrep -rl \
		--include '*.lexc' \
		--include '*.twolc' \
		--include '*.pmscript' \
		--include '*.xfscript'\
		--exclude 'Makefile*' \
		--exclude 'lexicon.tmp.lexc' \
		--exclude-dir 'generated_files' \
		--exclude-dir 'orig' \
		--exclude-dir 'incoming' \
		'!! ' $(top_srcdir)/src/* $(top_srcdir)/tools/* |\
		fgrep -v incoming/ )
DOCSRC_CG3 := $(shell fgrep -rl \
		--include '*.cg3' \
		--exclude 'Makefile*' \
		--exclude 'lexicon.tmp.lexc' \
		--exclude-dir 'generated_files' \
		--exclude-dir 'orig' \
		--exclude-dir 'incoming' \
		'!! ' $(top_srcdir)/src/* $(top_srcdir)/tools/* |\
		fgrep -v incoming/ )
DOCSRC=$(sort $(DOCSRC_XEROX) $(DOCSRC_CG3) )

# Remove vpath prefix for nested list construction:
BARE_DOCSRC := $(subst $(top_srcdir)/,,$(DOCSRC))

# Convert source filenames to extracted documentation filenames, VPATH safe:
# ../../../src/fst/stems/adverbs.lexc => src-fst-stems-adverbs.lexc.md
define src2md
$(addsuffix .md,$(subst /,-,$(subst $(top_srcdir)/,,$(1))))
endef

# Create actual list of MD files:
MDFILES=$(call src2md,$(DOCSRC))
# Append vpath prefix - for now, the files are stored in the source tree:
VPATH_MDFILES=$(addprefix $(top_srcdir)/docs/,$(MDFILES))

# Construct source file and md file pairs of the following format:
# src/fst/root.lexc@src-fst-root.lexc.md

# The variable DOCSRC_MDFILES contains a list of all source files and the
# corresponding md file in the following format:
#
# src/fst/root.lexc@src-fst-root.lexc.md
#
# From this we want to construct a nested Markdown bullet list as follows
# - src
#     - fst
#         - [root.lexc](src-fst-root.lexc.md)
#
# The resulting list should be the content in the $(LINKS) file.
DOCSRC_MDFILES=$(shell echo $(BARE_DOCSRC) | tr ' ' '\n' > docsrc.tmp; \
					   echo $(MDFILES) | tr ' ' '\n' > mdfiles.tmp; \
					   paste -d '@' docsrc.tmp mdfiles.tmp; )

# Extract Markdown doccomments:
define make_md_files
$$(top_srcdir)/docs/$$(call src2md,$(1)): $(1)
	$$(AM_V_AWK)"$(GAWK)" -v REPOURL=$(REPOURL) -v GLANG=$(GLANG) -f $(DOCC2MDWIKI) $$< |\
		$(SED) -e 's/@/REALLY_AT/g' |\
		tr '\n' '@' |\
		$(SED) -e 's/@@@*/@@/g' |\
		tr '@' '\n' |\
		$(SED) -e 's/REALLY_AT/@/g' > $$@
endef
define make_md_files_cg3
$$(top_srcdir)/docs/$$(call src2md,$(1)): $(1)
	$$(AM_V_AWK)"$(GAWK)" -v REPOURL=$(REPOURL) -v GLANG=$(GLANG) -f $(DOCC2MDWIKI_CG3) $$< |\
		$(SED) -e 's/@/REALLY_AT/g' |\
		tr '\n' '@' |\
		$(SED) -e 's/@@@*/@@/g' |\
		tr '@' '\n' |\
		$(SED) -e 's/REALLY_AT/@/g' > $$@
endef

# Build each MD file:
$(foreach f,$(DOCSRC_XEROX),$(eval $(call make_md_files,$(f))))
$(foreach f,$(DOCSRC_CG3),$(eval $(call make_md_files_cg3,$(f))))

# src file links: target should be:
#    https://github.com/giellalt/lang-sma/blob/main/src/fst/root.lexc
# host:      --------^
# owner/org: ------------^^^
# repo:      ----------------------^^^
# branch:    ----------------------------------^^^
# filepath:  ---------------------------------------^^^^^^^^^^^^^^^^
HOST=https://github.com
ORG=giellalt
## Query git or svn for repo name, fall back to dirname if none of them found
SH_REPO_NAME=$(shell cd $(top_srcdir); \
		if test -d ./.git; then \
			git config --get remote.origin.url | cut -d'/' -f2 | cut -d'.' -f1; \
		elif test -d ./.svn; then \
			svn info . | grep 'Repository Root' | rev | cut -d'/' -f1 | rev | cut -d'.' -f1; \
		else \
			pwd | rev | cut -d'/' -f1 | rev; \
		fi )
# When running via GitHub Actions, get org/owner + reponame from the environment:
GH_REPO=$(GITHUB_REPOSITORY)
# The branch name is presently hard-coded, could be taken from the commit:
BRANCH=main
# Use GitHub info if available, fall back to shell otherwise:
REPOURL=$(shell if test "x$(GH_REPO)" != x ; then \
				echo "$(HOST)/$(GH_REPO)/blob/$(BRANCH)"; \
			else \
				echo "$(HOST)/$(ORG)/$(SH_REPO_NAME)/blob/$(BRANCH)" ; \
			fi)

# Collect all target files into one big MD file:
$(ALLINONE_MD_PAGE): $(VPATH_MDFILES)
	$(AM_V_GEN)printf "# $(GLANGUAGE) description \n\nAll documents in one file\n\n" \
	| cat - $(VPATH_MDFILES) > $@

$(LINKS):
	$(AM_V_GEN)for doc2md in $(DOCSRC_MDFILES) ; do \
		doc=`echo "$$doc2md" | cut -d '@' -f 1` ;\
		md=`echo "$$doc2md" | cut -d '@' -f 2` ;\
		d=`dirname "$$doc"` ;\
		docname=`basename "$$doc" .md` ;\
		b=`basename "$$md" .md` ;\
		html=$$b.html ;\
		d1=`echo "$$d" | cut -d '/' -f 1` ;\
		d2=`echo "$$d" | cut -d '/' -f 2` ;\
		d3=`echo "$$d" | cut -d '/' -f 3` ;\
		d4=`echo "$$d" | cut -d '/' -f 4` ;\
		if test "x$$d1" != "x$$oldd1" ; then \
			echo "* \`$$d1/\`" ;\
			oldd1=$$d1 ;\
		fi ; \
		if test "x$$d2" = x ; then \
			echo "    * [$$docname]($$html) ([src]($(REPOURL)/$$doc))" ;\
		elif test "x$$d2" != "x$$oldd2" ; then \
			echo "    * \`$$d2/\`" ;\
			oldd2=$$d2 ;\
		fi ; \
		if test "x$$d3" = x -a "x$$d2" != x; then \
			echo "        * [$$docname]($$html) ([src]($(REPOURL)/$$doc))" ;\
		elif test "x$$d3" != "x$$oldd3" ; then \
			echo "        * \`$$d3/\`" ;\
			oldd3=$$d3 ;\
		fi ; \
		if test "x$$d4" = x -a "x$$d3" != x ; then \
			echo "            * [$$docname]($$html) ([src]($(REPOURL)/$$doc))" ;\
		elif test "x$$d4" != "x$$oldd4" ; then \
			echo "            * \`$$d4/\`" ;\
			oldd4=$$d4 ;\
		fi ; \
	done > $@

empty.md:
	$(AM_V_GEN)echo > $@

# FIXME: some temporary stuff to have index page
$(INDEX): $(HEADER) empty.md $(LINKS)
	$(AM_V_GEN)cat $^ > $@

clean-local:
	$(AM_V_at)-rm -rf $(builddir)/build
	$(AM_V_at)-rm -rf $(srcdir)/build
	$(AM_V_at)-rm -f $(doc_DATA)
	$(AM_V_at)-rm -f *-src.md src-*.md $(srcdir)/*-src.md $(srcdir)/src-*.md
	$(AM_V_at)-rm -f *-tools.md tools-*.md $(srcdir)/*-tools.md $(srcdir)/tools-*.md
	$(AM_V_at)-rm -f generated-markdowns.*
	$(AM_V_at)-rm -f docsrc.tmp mdfiles.tmp empty.md

include $(top_srcdir)/../giella-core/am-shared/silent_build-include.am
# vim: set ft=automake:
