## Include this file to lexc directory to build lexical automata

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

####### Source file defs: ########

#! @param GT_TRANSCRIPTIONS_SRCS required, the source files for orthographic
#!        transcriptions.

EXTRA_DIST=$(GT_TRANSCRIPTIONS_SRCS) $(GT_TRANSCRIPTIONS_REGEX_SRCS) $(GT_ABBREV_SRCS)

####### Automake targets: ########
# Make sure that targets are deleted when something breaks:
.DELETE_ON_ERROR:

# The transducers we build and don't distribute depend on the configuration:
GT_TRANSCRIPTORS=

if WANT_TRANSCRIPTORS
# Replace .lexc with .filtered.lookup:
DIGIT2TXT=$(patsubst %.lexc,%.filtered.lookup,$(GT_TRANSCRIPTIONS_SRCS))
REGEX2TXT=$(patsubst %.regex,%.filtered.lookup,$(GT_TRANSCRIPTIONS_REGEX_SRCS))
ABBREV2TXT=$(patsubst %.lexc,%.filtered.lookup,$(GT_ABBREV_SRCS))
EMOJIS2TXT=$(patsubst %.lexc,%.filtered.lookup,$(GT_EMOJIS_SRCS))
# Replace digit2text with text2digit to get the inverse fst's:
TXT2DIGIT=$(subst digit2text,text2digit,$(DIGIT2TXT))
# Rename arbitrary files ending in -XXX2text to -text2XXX:
TXT2ABBREV=$(shell for file in $(ABBREV2TXT) ; do basename $$file .filtered.lookup \
| cut -d'-' -f2 | sed 's/2text//' | sed 's/^/transcriptor-text2/' \
| sed 's/$$/.filtered.lookup/'; done )
TXT2EMOJIS=$(shell for file in $(EMOJIS2TXT) ; do basename $$file .filtered.lookup \
| cut -d'-' -f2 | sed 's/2text//' | sed 's/^/transcriptor-text2/' \
| sed 's/$$/.filtered.lookup/'; done )

# Add the proper suffix for each compiler:
if CAN_HFST
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(DIGIT2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(TXT2DIGIT))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(REGEX2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(TXT2ABBREV))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(ABBREV2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(TXT2EMOJIS))
GT_TRANSCRIPTORS+=$(addsuffix .hfstol,$(EMOJIS2TXT))
endif # CAN_HFST

if CAN_FOMA
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(DIGIT2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(TXT2DIGIT))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(REGEX2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(ABBREV2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(TXT2ABBREV))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(EMOJIS2TXT))
GT_TRANSCRIPTORS+=$(addsuffix .foma,$(TXT2EMOJIS))
endif # CAN_FOMA
endif # WANT_TRANSCRIPTORS

noinst_DATA=$(GT_TRANSCRIPTORS) $(GT_CUSTOM_TARGETS)

# The number-clock-date2text & inverse conversion transducers:

# The digit-to-text transducers are built here:
define digit2txt_transcriptors
.generated/transcriptor-%-digit2text.filtered.$(1): \
					.generated/transcriptor-%-digit2text.$(1) \
					../filters/remove-NA-strings.$(1) \
					../filters/remove-NG-strings.$(1) \
					../filters/remove-usage-tags.$(1) $$(GENDIR)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
			    @\"../filters/remove-usage-tags.$(1)\" \
			.o. @\"../filters/remove-NA-strings.$(1)\" \
			.o. @\"../filters/remove-NG-strings.$(1)\" \
			.o. @\"$$<\" \
			.o. @\"../filters/remove-NG-strings.$(1)\".i \
			.o. @\"../filters/remove-usage-tags.$(1)\".i \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst foma,$(eval $(call digit2txt_transcriptors,$(fst))))

# The text-to-digit transducers are built here:
define txt2digit_transcriptors
.generated/transcriptor-%-text2digit.filtered.$(1): \
					.generated/transcriptor-%-digit2text.$(1) \
					../filters/remove-usage-tags.$(1) \
					../orthography/spellrelax-tags.compose.$(1) \
					../orthography/spellrelax-with-tags.compose.$(1) $$(GENDIR)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "define Lex \
			[   @\"../filters/remove-usage-tags.$(1)\" \
			.o. @\"$$<\" \
			.o. @\"../filters/remove-usage-tags.$(1)\".i \
			] @\"../orthography/spellrelax-tags.compose.$(1)\" ;\n\
		define spellrelax @\"../orthography/spellrelax-with-tags.compose.$(1)\" ;\n\
		read regex Lex .o. spellrelax ;\n\
		invert net\n\
		save stack $$@\n\
		quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst foma,$(eval $(call txt2digit_transcriptors,$(fst))))

# The abbrevs-to-text transducers are built here:
define abbrevs2txt_transcriptors
.generated/transcriptor-%2text.filtered.$(1): \
					.generated/transcriptor-%2text.$(1) \
					../filters/remove-NA-strings.$(1) \
					../filters/remove-NG-strings.$(1) \
					../filters/remove-usage-tags.$(1) $$(GENDIR)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "read regex \
			    @\"../filters/remove-usage-tags.$(1)\" \
			.o. @\"../filters/remove-NA-strings.$(1)\" \
			.o. @\"../filters/remove-NG-strings.$(1)\" \
			.o. @\"$$<\" \
			.o. @\"../filters/remove-NG-strings.$(1)\".i \
			.o. @\"../filters/remove-usage-tags.$(1)\".i \
			;\n\
		 save stack $$@\n\
		 quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst foma,$(eval $(call abbrevs2txt_transcriptors,$(fst))))

# The text-to-abbrevs transducers are built here:
define txt2abbrevs_transcriptors
.generated/transcriptor-text2%.filtered.$(1): \
					.generated/transcriptor-%2text.$(1) \
					../filters/remove-usage-tags.$(1) \
					../orthography/spellrelax-tags.compose.$(1) \
					../orthography/spellrelax-with-tags.compose.$(1) $$(GENDIR)
	$$(AM_V_XFST_TOOL)$$(PRINTF) "define Lex \
			[   @\"../filters/remove-usage-tags.$(1)\" \
			.o. @\"$$<\" \
			.o. @\"../filters/remove-usage-tags.$(1)\".i \
			] @\"../orthography/spellrelax-tags.compose.$(1)\" ;\n\
		define spellrelax @\"../orthography/spellrelax-with-tags.compose.$(1)\" ;\n\
		read regex Lex .o. spellrelax ;\n\
		invert net\n\
		save stack $$@\n\
		quit\n" | $$(XFST_TOOL)
endef
$(foreach fst,hfst foma,$(eval $(call txt2abbrevs_transcriptors,$(fst))))

# just copy from hidden build dir to here for final prods

transcriptor-%.hfstol: .generated/transcriptor-%.hfstol
	$(AM_V_CP)cp $< $@

####### Other targets: ###########

include $(top_srcdir)/../giella-core/am-shared/lexc-include.am
include $(top_srcdir)/../giella-core/am-shared/regex-include.am
include $(top_srcdir)/../giella-core/am-shared/lookup-include.am
include $(top_srcdir)/../giella-core/am-shared/xfscript-include.am
include $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am
include $(top_srcdir)/../giella-core/am-shared/silent_build-include.am
include $(top_srcdir)/../giella-core/am-shared/dot-generated-dir.am

# vim: set ft=automake:
