## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

####### Intermediate target file names: ########

# set this to the filename of the grammar checker archive:
GIELLA_GC_ZDISTRO=$(GTLANG2).zcheck
# set this to the filename of the new runtime bundle:
GIELLA_GC_DRBDISTRO=$(GTLANG2).drb

# set this to the filename of the speller archive:
GIELLA_GC_SPELLER=$(GTLANG2).zhfst

GIELLA_GC_MWEDIS=$(GIELLA_GC_MWEDIS_SRC:.cg3=.bin)
GIELLA_GC_VALENCY=$(GIELLA_GC_VALENCY_SRC:.cg3=.bin)
GIELLA_GC_SPELLER_CG=$(GIELLA_GC_SPELLER_CG_SRC:.cg3=.bin)
GIELLA_GC_GRAMCHECKER=$(GIELLA_GC_GRAMCHECKER_SRC:.cg3=.bin)
GIELLA_GC_DISAMBIGUATOR=$(GIELLA_GC_DISAMBIGUATOR_SRC:.cg3=.bin)
GIELLA_GC_WHSPACE_ANAL=$(GIELLA_GC_WHSPACE_ANAL_SRC:.regex=.hfst)

GIELLA_GC_TOKENISER=tokeniser-gramcheck-gt-desc.pmhfst
GIELLA_GC_ANAL_SPELLER=acceptor.default.hfst
GIELLA_GC_SPELLER_ERRMOD=errmodel.default.hfst
GIELLA_GC_GENERATOR=generator-gramcheck-gt-norm.hfstol
GIELLA_GC_ERRORS=errors.xml
GIELLA_GC_PIPESPEC=pipespec.xml
GIELLA_GC_PIPELINE=pipeline.ts
GIELLA_GC_ERROR_FTLS=$(wildcard errors-*.ftl)

#! @var GIELLA_GC_GRAMCHECKER_SRC source for rules of vislcg3 grammar checker
GC_SRC_FILES=$(GIELLA_GC_MWEDIS_SRC) \
			 $(GIELLA_GC_SPELLER_CG_SRC) \
			 $(GIELLA_GC_DISAMBIGUATOR_SRC) \
			 $(GIELLA_GC_WHSPACE_ANAL_SRC) \
			 $(GIELLA_GC_GRAMCHECKER_SRC) \
			 $(GIELLA_GC_VALENCY_SRC)

EXTRA_DIST=$(GC_SRC_FILES) \
		   $(GIELLA_GC_ERRORS) \
		   $(GIELLA_GC_PIPESPEC) \
		   $(GIELLA_GC_PIPELINE)

# Asset files for .drb build (all files except pipespec.xml):
GIELLA_GC_ASSETS = $(addprefix assets/,\
				   $(GIELLA_GC_TOKENISER)      \
				   $(GIELLA_GC_VALENCY)        \
				   $(GIELLA_GC_MWEDIS)         \
				   $(GIELLA_GC_DISAMBIGUATOR)  \
				   $(GIELLA_GC_GRAMCHECKER)    \
				   $(GIELLA_GC_ANAL_SPELLER)   \
				   $(GIELLA_GC_SPELLER_ERRMOD) \
				   $(GIELLA_GC_SPELLER_CG)     \
				   $(GIELLA_GC_GENERATOR)      \
				   $(GIELLA_GC_WHSPACE_ANAL)   \
				   $(LOCAL_GC_ZIP_FILES)       \
				   errors.json                 \
				   $(GIELLA_GC_ERROR_FTLS)     )

####### Automake targets: ########

if WANT_GRAMCHECK
if CAN_VISLCG

GIELLA_GC_ZIPFILES=$(GIELLA_GC_TOKENISER)      \
				   $(GIELLA_GC_VALENCY)        \
				   $(GIELLA_GC_MWEDIS)         \
				   $(GIELLA_GC_DISAMBIGUATOR)  \
				   $(GIELLA_GC_GRAMCHECKER)    \
				   $(GIELLA_GC_ANAL_SPELLER)   \
				   $(GIELLA_GC_SPELLER_ERRMOD) \
				   $(GIELLA_GC_SPELLER_CG)     \
				   $(GIELLA_GC_GENERATOR)      \
				   $(GIELLA_GC_ERRORS)         \
				   $(GIELLA_GC_PIPESPEC)       \
				   $(GIELLA_GC_WHSPACE_ANAL)   \
				   $(LOCAL_GC_ZIP_FILES)

noinst_DATA=$(GIELLA_GC_SPELLER)

voikkosharedir=$(datadir)/voikko/4/
voikkoshare_DATA=$(GIELLA_GC_ZDISTRO)

endif # CAN_VISLCG

# Build .drb file when divvun-runtime is available
if HAVE_DIVVUN_RUNTIME
all-local: $(GIELLA_GC_DRBDISTRO)
endif

endif # WANT_GRAMCHECK

####### Build rules - locally and via include: ########

ZIPFLAGS=-j

# Copy tokeniser:
$(GIELLA_GC_TOKENISER): $(top_builddir)/tools/tokenisers/$(GIELLA_GC_TOKENISER)
	$(AM_V_CP)cp -f $< $@

# Copy valency if available:
$(GIELLA_GC_VALENCY_SRC): $(top_builddir)/src/cg3/$(GIELLA_GC_VALENCY_SRC)
	$(AM_V_CP)cp -f $< $@

# Copy mwe-dis:
mwe-dis.cg3: \
		$(top_builddir)/tools/tokenisers/mwe-dis.cg3
	$(AM_V_CP)cp -f $< $@

# Whitespace analysers:
%.hfst: %.regex
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) --disjunct -i $< \
		| $(HFST_FST2FST) -O -o $@

# Copy speller-analyser:
$(GIELLA_GC_ANAL_SPELLER): \
		../spellcheckers/analyser-desktopspeller-gt-norm.hfst \
		filters/make-desktopspeller-CG-tags.hfst
	$(AM_V_FST2FST)$(HFST_INVERT) $(MORE_VERBOSITY) $< \
	| $(HFST_COMPOSE) $(MORE_VERBOSITY) -F \
		-1 filters/make-desktopspeller-CG-tags.hfst \
	| $(HFST_INVERT) $(MORE_VERBOSITY) \
	| $(HFST_PUSH_WEIGHTS) --push=initial \
	| $(HFST_FST2FST) $(HFST_FLAGS) -f olw -o $@

# Copy speller-errormodel:
$(GIELLA_GC_SPELLER_ERRMOD): \
		../spellcheckers/errmodel.default.hfst
	$(AM_V_CP)cp -f $< $@

# Build analysing speller zhfst file, used for bash pipes (modes):
$(GIELLA_GC_SPELLER): $(GIELLA_GC_ANAL_SPELLER)   \
					  $(GIELLA_GC_SPELLER_ERRMOD) \
					  $(srcdir)/index.xml
	$(AM_V_at)rm -f $@
	$(AM_V_ZIP)$(ZIP) $(ZIPFLAGS) $(MORE_VERBOSITY) $@ $^

# Copy disambiguator:  done by other build rules

# Fallback disambiguator rule:
disambiguator.cg3: $(top_srcdir)/src/cg3/disambiguator.cg3
	$(AM_V_CP)cp -f $< $@

# Copy grammarchecker: done by other build rules

# Copy generator:
$(GIELLA_GC_GENERATOR): $(top_builddir)/src/fst/$(GIELLA_GC_GENERATOR)
	$(AM_V_CP)cp -f $< $@

# Validate and copy the error messages:
$(GIELLA_GC_ERRORS): $(srcdir)/errors.source.xml
	$(AM_V_GEN)divvun-validate-suggest $<
	$(AM_V_GEN)awk "{print} NR==1{print \"<!-- NB! This file is generated from $<. DO NOT EDIT! -->\"}" \
		$< > $@

# Finally build the zcheck file:
$(GIELLA_GC_ZDISTRO): $(GIELLA_GC_ZIPFILES)
	$(AM_V_at)rm -f $@
	gtgramtool build-archive pipespec.xml $@

# Build .drb file if we have divvun-runtime and pipeline.ts
if HAVE_DIVVUN_RUNTIME
# Prepare assets directory for .drb build
assets-dir:
	$(AM_V_at)$(MKDIR_P) assets

assets/%.hfst: %.hfst | assets-dir
	$(AM_V_CP)cp -f $< $@

assets/%.hfstol: %.hfstol | assets-dir
	$(AM_V_CP)cp -f $< $@

assets/%.bin: %.bin | assets-dir
	$(AM_V_CP)cp -f $< $@

assets/%.pmhfst: %.pmhfst | assets-dir
	$(AM_V_CP)cp -f $< $@

assets/errors.json: errors.json | assets-dir
	$(AM_V_CP)cp -f $< $@

assets/errors-%.ftl: errors-%.ftl | assets-dir
	$(AM_V_CP)cp -f $< $@

# Copy pipeline.ts to build directory for out-of-source builds
$(GIELLA_GC_PIPELINE): $(srcdir)/$(GIELLA_GC_PIPELINE)
	$(AM_V_CP)cp -f $< $@

# Build the .drb bundle
$(GIELLA_GC_DRBDISTRO): $(GIELLA_GC_PIPELINE) \
						$(GIELLA_GC_ASSETS)
	$(AM_V_at)test -f $(GIELLA_GC_PIPELINE) || cp -f $(srcdir)/$(GIELLA_GC_PIPELINE) $(GIELLA_GC_PIPELINE)
	$(AM_V_GEN)cd $(builddir) && $(DIVVUN_RUNTIME) bundle

endif # HAVE_DIVVUN_RUNTIME

# Additional developer tools:
dev: modes/$(GTLANG)gram.mode schemas.xml

modes/%.mode: pipespec.xml
	$(AM_V_at)$(MKDIR_P) modes
	$(AM_V_GEN)divvun-gen-sh -d modes $<

schemas.xml:
	divvun-gen-xmlschemas >$@

# test targets

# minimal check that it works at all, as long as the grammar checker is enabled:
if WANT_GRAMCHECK
check-local:
	echo | $(DIVVUN_CHECKER) -a $(GIELLA_GC_ZDISTRO)
endif # WANT_GRAMCHECK

### Clean target:
clean-local:
	-rm -f *.bin schemas.xml *.zcheck *.drb *.hfst *.hfstol *.zip *.zhfst
	-rm -f mwe-dis.cg3 valency.cg3
	-rm -f $(GIELLA_GC_ZIPFILES)
	-rm -f $(GIELLA_GC_PIPELINE)
	-rm -rf modes assets

### Include the following

include $(top_srcdir)/../giella-core/am-shared/vislcg3-include.am
include $(top_srcdir)/../giella-core/am-shared/silent_build-include.am

# vim: set ft=automake:
