## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

####### Intermediate target file names: ########

# set this to the filename of the analyser archive:
GIELLA_TTS_ZDISTRO=$(GLANG2)-tts.zpipe

# Various text conversion fst's - normalisers/expanders and IPA:
GIELLA_ANL_IPA=$(GIELLA_ANL_IPA_FST_FILE)

# List of transcriptors: all files in src/transcriptions/ matching the file name
# pattern:
# *2text.filtered.lookup.hfstol
# Makes it flexible and easily adaptable to the needs of each language.
# For additional flexibility, one can filter out files that should not be
# included, by specifying them in tools/tts/Makefile.am (without suffix).
FILTER_OUT_FILES=$(addsuffix %, $(GIELLA_ANL_REMOVE_TRANSCRIPTORS))
GIELLA_XSC_TRANSCIPTOR_LIST=$(basename $(notdir $(wildcard $(top_builddir)/src/fst/transcriptions/*2text.filtered.lookup.hfstol)))
GIELLA_XSC_TRANSCIPTOR_FILTERED_LIST=$(filter-out $(FILTER_OUT_FILES), $(GIELLA_XSC_TRANSCIPTOR_LIST))
GIELLA_XSC_TRANSCIPTORS=$(addsuffix .hfst, $(GIELLA_XSC_TRANSCIPTOR_FILTERED_LIST))

GIELLA_XSC_NORMALISER=transcriptor-gt-desc.hfstol
GIELLA_XSC_ANALYSER=analyser-gt-norm.hfstol
GIELLA_XSC_GENERATOR=generator-tts-gt-norm.hfstol

# Disamb and syntax analysis files, including whitespace analysis:
GIELLA_ANL_VALENCY=$(GIELLA_ANL_VALENCY_SRC:.cg3=.bin)
GIELLA_ANL_WHSPACE_ANAL=$(GIELLA_ANL_WHSPACE_ANAL_SRC:.regex=.hfst)
GIELLA_ANL_MWEDIS=$(GIELLA_ANL_MWEDIS_SRC:.cg3=.bin)
GIELLA_ANL_DISAMBIGUATOR=$(GIELLA_ANL_DISAMBIGUATOR_SRC:.cg3=.bin)
GIELLA_ANL_FUNCTIONS=$(GIELLA_ANL_FUNCTIONS_SRC:.cg3=.bin)
GIELLA_ANL_DEPENDENCY=$(GIELLA_ANL_DEPENDENCY_SRC:.cg3=.bin)
GIELLA_ANL_SEMSETS=$(GIELLA_ANL_SEMSETS_SRC:.cg3=.bin)

# Pipeline specification:
GIELLA_ANL_PIPESPEC=pipespec.xml

#! @var GIELLA_ANL_GRAMCHECKER_SRC source for rules of vislcg3 analyser
TTSPIPE_SRC_FILES=$(GIELLA_ANL_MWEDIS_SRC) \
			 $(GIELLA_ANL_DISAMBIGUATOR_SRC) \
			 $(GIELLA_ANL_WHSPACE_ANAL_SRC) \
			 $(GIELLA_ANL_SEMSETS_SRC) \
			 $(GIELLA_ANL_VALENCY)

#! @var INCLUDES need to be copied over before compiling main cg file
GIELLA_CG_INCLUDES=$(TTSPIPE_SRC_FILES)

EXTRA_DIST=$(TTSPIPE_SRC_FILES) \
		   $(GIELLA_ANL_PIPESPEC)

####### Automake targets: ########

if WANT_TTS
if CAN_VISLCG
GIELLA_ANL_ZIPFILES=$(GIELLA_ANL_IPA)            \
					$(GIELLA_XSC_NORMALISER)     \
					$(GIELLA_XSC_ANALYSER)       \
					$(GIELLA_XSC_GENERATOR)      \
					$(GIELLA_ANL_TOKENISER)      \
					$(GIELLA_ANL_VALENCY)        \
					$(GIELLA_ANL_WHSPACE_ANAL)   \
					$(GIELLA_ANL_MWEDIS)         \
					$(GIELLA_ANL_DISAMBIGUATOR)  \
					$(GIELLA_ANL_FUNCTIONS)      \
					$(GIELLA_ANL_SEMSETS)        \
					$(GIELLA_ANL_DEPENDENCY)     \
					$(GIELLA_ANL_PIPESPEC)       \
					$(GIELLA_XSC_TRANSCIPTORS)   \
					$(LOCAL_ANL_ZIP_FILES)

noinst_DATA=$(GIELLA_ANL_SPELLER)

voikkosharedir=$(datadir)/giella/$(GLANG)/
voikkoshare_DATA=$(GIELLA_TTS_ZDISTRO)

endif # CAN_VISLCG
endif # WANT_TTS

####### Build rules - locally and via include: ########

ZIPFLAGS=-j

# Copy tokeniser:
$(GIELLA_ANL_TOKENISER): \
			$(top_builddir)/tools/tokenisers/$(GIELLA_ANL_TOKENISER)
	$(AM_V_CP)cp -f $< $@

# Compile the IPA conversion fst:
$(GIELLA_ANL_IPA): \
			$(top_builddir)/src/fst/phonetics/$(GIELLA_ANL_IPA)
	$(AM_V_FST2FST)$(HFST_FST2FST) -f olw -i $< -o $@

# Compile the various transcriptor fst's:
transcriptor-%.hfst: \
			$(top_builddir)/src/fst/transcriptions/transcriptor-%.hfstol
	$(AM_V_FST2FST)$(HFST_FST2FST) $(HFST_FORMAT) -i $< -o $@

# copy the various transcriptor fst's
transcriptor-%.hfstol: \
			$(top_builddir)/src/fst/transcriptions/transcriptor-%.hfstol
	$(AM_V_CP)cp -f $< $@

# Compile the normaliser fst by looping over all individual transcriptors,
# and unionise them one at a time with the result of the preceding step.
# The first in the list is used as the base. Finally, make all final full
# stops optional, so that both 'dr.' and 'dr' will return 'doktor'.
$(GIELLA_XSC_NORMALISER).tmp: $(GIELLA_XSC_TRANSCIPTORS)
	$(AM_V_GEN)cp -f $< $@
	$(AM_V_UNION)for f in $(filter-out $<, $^); do \
		$(HFST_DISJUNCT) -1 $@ -2 $$f -o $@.tmp; mv -f $@.tmp $@ ; \
		done

$(GIELLA_XSC_NORMALISER): $(top_builddir)/src/fst/filters/make-optional-final_full_stops.hfst \
                          $(GIELLA_XSC_NORMALISER).tmp
	$(AM_V_FST2FST)$(HFST_COMPOSE) -1 $< -2 $@.tmp \
		| $(HFST_MINIMIZE) \
		| $(HFST_FST2FST) -f olw -o $@
	$(AM_V_GEN)rm -f $@.tmp

# Copy analyser and generator for divvun-normaliser:
# Copy mwe-dis:
$(GIELLA_XSC_ANALYSER) \
$(GIELLA_XSC_GENERATOR): \
%.hfstol: $(top_builddir)/src/fst/%.hfstol
	$(AM_V_CP)cp -f $< $@


# Compile the whitespace analyser:
$(GIELLA_ANL_WHSPACE_ANAL): $(GIELLA_ANL_WHSPACE_ANAL_SRC)
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) --disjunct -i $< \
		| $(HFST_FST2FST) -O -o $@

# Copy mwe-dis:
$(GIELLA_ANL_MWEDIS_SRC): \
		$(top_srcdir)/tools/tokenisers/$(GIELLA_ANL_MWEDIS_SRC)
	$(AM_V_CP)cp -f $< $@

# cg3 files from common sources:
$(GIELLA_ANL_VALENCY_SRC) \
$(GIELLA_ANL_FUNCTIONS_SRC) \
$(GIELLA_ANL_DEPENDENCY_SRC): \
%.cg3: $(top_builddir)/src/cg3/%.cg3
	$(AM_V_CP)cp -f $< $@

$(GIELLA_ANL_SEMSETS_SRC): $(top_builddir)/src/cg3/$(GIELLA_ANL_SEMSETS_SRC)
	$(AM_V_CP)cp -f $< $@

# Disambiguator:
$(GIELLA_ANL_DISAMBIGUATOR_SRC): \
%.cg3: $(top_srcdir)/src/cg3/%.cg3 $(GIELLA_ANL_SEMSETS_SRC)
	$(AM_V_CP)cp -f $< $@

# Finally build the .zpipe file:
$(GIELLA_TTS_ZDISTRO): $(GIELLA_ANL_ZIPFILES)
	$(AM_V_at)rm -f $@
	$(AM_V_ZIP)$(ZIP) $(ZIPFLAGS) $(MORE_VERBOSITY) $@ $^

# Additional developer tools:
dev: modes/$(GLANG)normalise.mode schemas.xml

modes/%.mode: pipespec.xml
	$(AM_V_at)$(MKDIR_P) modes
	$(AM_V_GEN)divvun-gen-sh -d modes $<

schemas.xml:
	divvun-gen-xmlschemas >$@

### Clean target:
clean-local:
	-rm -f *.bin schemas.xml *.zcheck *.hfst *.hfstol *.zip *.zhfst generated-*
	-rm -f $(GIELLA_ANL_ZIPFILES)
	-rm -rf modes

### Include the following

include $(top_srcdir)/../giella-core/am-shared/hfst-format-include.am
include $(top_srcdir)/../giella-core/am-shared/vislcg3-include.am
include $(top_srcdir)/../giella-core/am-shared/silent_build-include.am

# vim: set ft=automake:
